name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Release Tag
        required: true
        default: dry-run
        type: string

env:
  PACKAGE_NAME: "easy-nlp-translate"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup

      - name: Validate Tag Input
        id: validate_tag
        run: |
          TAG_INPUT="${{ github.event.inputs.tag }}"
          VALID_TAG_REGEX='^[0-9]+\.[0-9]+\.[0-9]+$|^[0-9]+\.[0-9]+\.[0-9]+a[0-9]+$|^[0-9]+\.[0-9]+\.[0-9]+b[0-9]+$|^[0-9]+\.[0-9]+\.[0-9]+rc[0-9]+$'

          if [[ "$TAG_INPUT" =~ $VALID_TAG_REGEX ]]; then
            echo "Tag '$TAG_INPUT' is valid."
            echo "is_valid=true" >> "$GITHUB_OUTPUT"
          else
            echo "Error: Tag '$TAG_INPUT' does not match the required pattern."
            echo "is_valid=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Extract tag and Details
        id: release
        if: steps.validate_tag.outputs.is_valid == 'true'
        run: |
          TAG_NAME="${{ github.event.inputs.tag }}"
          NEW_VERSION=$(echo "$TAG_NAME" | awk -F'-' '{print $1}')
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "Version is $NEW_VERSION"
          echo "Tag name is $TAG_NAME"
      - name:
        id: package_name
        run: |
          PACKAGE_NAME=$(uv run toml get --toml-path=pyproject.toml project.name)
          echo "Package name is $PACKAGE_NAME"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: TOML Values
        id: toml
        run: |
          VERSION=$(uv run toml get --toml-path=pyproject.toml project.version)
          echo "Version is $VERSION"
          if [ "$VERSION" != "${{ needs.details.outputs.new_version }}" ]; then
            echo "Version in pyproject.toml does not match the tag version."
            exit 1
          fi
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://test.pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          echo "Response: $response"
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  build_and_publish:
    name: Build and Publish
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      - name: Build Python Package
        run: uv build

      - name: Publish to pypi
        run: uv publish --index testpypi

  github_release:
    name: Create GitHub Release
    needs: [details, check_pypi, build_and_publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ needs.details.outputs.tag_name }}
        run: |
          gh release create "$TAG_NAME" dist/* --title "$TAG_NAME" --generate-notes
