name: prerelease

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      package_name: ${{ steps.release.outputs.package_name }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echon "new_version=$NEW_VERSION" >> "$GITHUB_ENV"
            echo "Version is $NEW_VERSION"
          else
            echo "No tag found"
            exit 1
          fi
      - name:
        id: package_name
        run: |
          PACKAGE_NAME=$(uv run toml get --toml-path=pyproject.toml project.name)
          echo "Package name is $PACKAGE_NAME"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
      - name: TOML Values
        id: toml
        run: |
          VERSION=$(uv run toml get --toml-path=pyproject.toml project.version)
          echo "Version is $VERSION"
          if [ "$VERSION" != "$NEW_VERSION" ]; then
            echo "Version in pyproject.toml does not match the tag version."
            exit 1
          fi
  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ needs.details.outputs.package_name }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi
